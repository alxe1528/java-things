编译器会进行泛型擦除”是一个常识了（好吧，实际擦除的是参数和自变量的类型）。这个过程由“类型擦除”实现。但是并非像许多开发者认为的那样，在 <..> 符号内的东西都被擦除了。看下面这段代码：

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
public class ClassTest {
  public static void main(String[] args) throws Exception {
    ParameterizedType type = (ParameterizedType) 
       Bar.class.getGenericSuperclass();
    System.out.println(type.getActualTypeArguments()[0]);
 
    ParameterizedType fieldType = (ParameterizedType) 
        Foo.class.getField("children").getGenericType();
    System.out.println(fieldType.getActualTypeArguments()[0]);
 
    ParameterizedType paramType = (ParameterizedType) 
        Foo.class.getMethod("foo", List.class)
        .getGenericParameterTypes()[0];
    System.out.println(paramType.getActualTypeArguments()[0]);
 
    System.out.println(Foo.class.getTypeParameters()[0]
        .getBounds()[0]);
  }
 
  class Foo<E extends CharSequence> {
    public List<Bar> children = new ArrayList<Bar>();
    public List<StringBuilder> foo(List<String> foo) {return null; }
    public void bar(List<? extends String> param) {}
  }
 
  class Bar extends Foo<String> {}
}
你知道输出了什么吗?
1
2
3
4
5
class java.lang.String
class ClassTest$Bar
class java.lang.String
class java.lang.StringBuilder
interface java.lang.CharSequence
你会发现每一个类型参数都被保留了，而且在运行期可以通过反射机制获取到。那么到底什么是“类型擦除”？至少某些东西被擦除了吧？是的。事实上，除了结构化信息外的所有东西都被擦除了 —— 这里结构化信息是指与类结构相关的信息，而不是与程序执行流程有关的。换言之，与类及其字段和方法的类型参数相关的元数据都会被保留下来，可以通过反射获取到。

而其他的信息都被擦除掉了。例如下面这段代码：

1
2
3
4
5
List<String> list = new ArrayList<>();
Iterator<String> it = list.iterator();
while (it.hasNext()) {
   String s = it.next();
}
实际上会被转换成这个（这两段代码的字节码是一致的）

1
2
3
4
5
List list = new ArrayList();
Iterator it = list.iterator();
while (it.hasNext()) {
   String s = (String) it.next();
}
因此，定义在方法体内的类型参数会被擦除，在必要的时候会有类型转换。另外，如果一个方法被定义为接受 List 参数，这个 T 会被转换成 Object （如果定义了类型的上界的话就转换成对应的类型。这也是你不能 new T() 的原因）。（顺便这里有个关于类型擦除的问题）

目前为止类型擦除定义中的前两点我们都讲完了。第三点是关于bridge方法，我已经在 stackoverflow 上的这个问题（和回答）中已经说明了。

两个结论。第一，java 泛型是非常复杂的。但是不用完全理解这些细节也可以使用它们。

第二，不要假设所有的类型信息都被擦除了 —— 结构化的类型参数还存在，需要的话还是可以用下的（不过不要过分依赖反射机制）。